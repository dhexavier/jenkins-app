pipeline {
    agent {
        docker {
            image 'maven:latest' // Use the Maven Docker image
            args '-v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""' // Allow Docker commands to be run inside the container
        }
    }
    environment {
        SHELL = "/bin/bash" // Ensure the shell used is bash
        JAVA_HOME = "/opt/java/openjdk" // Update JAVA_HOME path dynamically
        PATH = "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/opt/java/openjdk/bin" // Set explicit PATH including Homebrew and Docker paths
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                git branch: 'main', url: 'https://github.com/dhexavier/jenkins-app.git', credentialsId: 'github-cred'
            }
        }
        stage('Environment Check') {
            steps {
                script {
                    // Check essential commands and environment variables
                    sh '''
                        echo "Current PATH: $PATH"
                        echo "Current SHELL: $SHELL"
                        echo "JAVA_HOME: $JAVA_HOME"
                        which docker || echo "Docker not found!"
                        which mvn || echo "Maven not found!"
                        which sh || echo "Shell (sh) not found!"
                        docker --version
                        mvn --version
                    '''
                }
            }
        }
        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Navigate to the application directory
                    script {
                        sh '''
                            echo "Building the application..."
                            mvn -Dmaven.repo.local=${WORKSPACE}/.m2/repository clean package
                        '''
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "dhexavier1/jenkins-app:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('dockerhub-cred')
            }
            steps {
                script {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh '''
                            echo "Building Docker image..."
                            docker build -t ${DOCKER_IMAGE} .
                            echo "Pushing Docker image to Docker Hub..."
                            echo ${REGISTRY_CREDENTIALS_PSW} | docker login -u ${REGISTRY_CREDENTIALS_USR} --password-stdin
                            docker push ${DOCKER_IMAGE}
                        '''
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            echo "Updating deployment file..."
                            sed -i '' 's|replaceImageTag|${BUILD_NUMBER}|g' java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git config user.email "testpen008@gmail.com"
                            git config user.name "DheXavier"
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Assuming `kubectl` is set up locally and authenticated with the cluster
                    sh 'kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml'
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more details.'
        }
    }
}
