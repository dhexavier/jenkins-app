pipeline {
    agent {
        docker {
            image 'maven:latest'  // Confirmed working image
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        // Explicitly set the shell and correct PATH
        SHELL = "/bin/bash"
        PATH = "/bin:/usr/bin:/usr/local/bin:$PATH"
    }
    stages {
        stage('Checkout') {
            steps {
                // Ensure Git is correctly accessible; if necessary, specify credentials
                git branch: 'main', url: 'https://github.com/dhexavier/jenkins-app.git'
            }
        }
        stage('Build and Test') {
            steps {
                // Force using /bin/bash explicitly to avoid PATH issues
                sh '/bin/bash -c "echo Current PATH: $PATH && mvn clean package"'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    // Use /bin/bash explicitly for SonarQube analysis
                    sh '/bin/bash -c "echo Running SonarQube analysis && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}"'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "dhexavier1/jenkins-app:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('dockerhub-cred')
            }
            steps {
                script {
                    // Build and push the Docker image using /bin/bash
                    sh '/bin/bash -c "echo Building Docker image && docker build -t ${DOCKER_IMAGE} . && docker push ${DOCKER_IMAGE}"'
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                        // Update deployment using /bin/bash
                        sh '/bin/bash -c "echo Updating deployment file && sed -i \'\' \'s|replaceImageTag|${BUILD_NUMBER}|g\' java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml && git config user.email \'testpen008@gmail.com\' && git config user.name \'DheXavier\' && git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml && git commit -m \'Update deployment image to version ${BUILD_NUMBER}\' && git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"'
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Deploy to Kubernetes using /bin/bash
                    sh '/bin/bash -c "kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml"'
                }
            }
        }
    }
}
