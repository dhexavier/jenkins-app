pipeline {
    agent any
    environment {
        SHELL = "/bin/bash"  // Ensure we are using Bash
        PATH = "/usr/local/bin:/usr/bin:/bin:/opt/homebrew/bin:$PATH"  // Explicitly set PATH to include Docker and other essential paths
        JAVA_HOME = "/opt/java/openjdk"  // Set JAVA_HOME path dynamically
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/dhexavier/jenkins-app.git'
            }
        }
        stage('Test Shell Command') {
            steps {
                sh '/bin/bash -c "echo Shell is working!"'
            }
        }
        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Navigate to the application directory
                    sh '''
                        echo "Current PATH: $PATH"
                        mvn -Dmaven.repo.local=${WORKSPACE}/.m2/repository clean package
                    '''
                }
            }
        }
        stage('Test Docker') {
            steps {
                script {
                    // Test Docker with a simple hello-world container
                    sh 'docker run hello-world'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "dhexavier1/jenkins-app:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('dockerhub-cred')
            }
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        echo "Building Docker image..."
                        docker build -t ${DOCKER_IMAGE} .
                        echo ${REGISTRY_CREDENTIALS_PSW} | docker login -u ${REGISTRY_CREDENTIALS_USR} --password-stdin
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more details.'
        }
    }
}
